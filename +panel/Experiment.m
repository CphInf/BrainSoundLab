function p = Experiment
ph = 385; % panel height
pTitle = 'Experiment';
pTag = 'Experiment';
% Panel and hide button
p = uipanel(gcf, 'Units', 'pixels', 'FontWeight', 'bold', 'Visible', 'off', ...
    'BorderType', 'line', 'HighlightColor', [0.5 0.5 0.5], ...
    'Title', pTitle, ...
    'Tag', pTag, ...
    'Position', [0 0 300 ph]);
BSL = guidata(gcf);
uicontrol(p, 'Style', 'pushbutton', ...
    'String', 'x', ...
    'HitTest', 'off', ...
    'Callback', @(h,ed) BSL.hidePanel(pTag), ...
    'Position', [277 ph-30 20 16]);
% Panel components --------------------------------------------------------
% Open button and experiment name
uicontrol(p, 'Style', 'pushbutton', ...
    'String', 'Open', ...
    'Callback', @(h,ed) BSL.openExperiment(), ...
    'Position', [10 ph-49 75 22]);
uicontrol(p, 'Style', 'edit', 'HorizontalAlignment', 'left', ...
    'Enable', 'inactive', ...
    'Tag', 'e_name_experiment', ...
    'Position', [100 ph-49 111 22]);
% Progress indicator
uicontrol(p, 'Style', 'text', 'HorizontalAlignment', 'center', ...
    'Tag', 't_progressIndicator_experiment', ...
    'String', 'Ready', ...
    'BackgroundColor', [0.7, 1, 0.7], ...
    'Position', [220 ph-45 70 14]);
% Blocks
uicontrol(p, 'Style', 'text', 'HorizontalAlignment', 'left', ...
    'String', 'Blocks:', ...
    'Position', [10 ph-68 75 14]);
uicontrol(p, 'Style', 'listbox', 'HorizontalAlignment', 'left', ...
    'BackgroundColor', [1 1 1], ...
    'Enable', 'off', ...
    'Tag', 'lb_blocks_experiment', ...
    'Callback', @(h,ed) Callback_blocks(h, BSL), ...
    'Position', [10 ph-302 201 230]);
% Channels
uicontrol(p, 'Style', 'text', 'HorizontalAlignment', 'left', ...
    'String', 'Channels:', ...
    'Position', [220 ph-68 50 14]);
uicontrol(p, 'Style', 'listbox', 'HorizontalAlignment', 'left', ...
    'BackgroundColor', [1 1 1], ...
    'Enable', 'off', ...
    'Tag', 'lb_channels_experiment', ...
    'Callback', @(h,ed) Callback_channels(h, BSL), ...
    'Position', [220 ph-302 70 230]);
% Suppress repeating spikes among channels
uicontrol(p, 'Style', 'checkbox', 'HorizontalAlignment', 'left', ...
    'String', 'Suppress repeating spikes among channels', ...
    'Value', BSL.suppressRepSpikes, ...
    'Callback', @(h,ed) Callback_suppressRepSpikes(h, BSL), ...
    'Position', [10 ph-325 230 20]);
% Tolerance
uicontrol(p, 'Style', 'text', 'HorizontalAlignment', 'left', ...
    'String', 'Time difference tolerance:', ...
    'Position', [10 ph-348 170 14]);
uicontrol(p, 'Style', 'text', 'HorizontalAlignment', 'left', ...
    'String', 's', ...
    'Position', [275 ph-348 150 14]);
uicontrol(p, 'Style', 'edit', 'HorizontalAlignment', 'left', ...
    'Tag', 'e_tolerance_experiment', ...
    'String', BSL.tolerance, ...
    'Callback', @(h,ed) Callback_tolerance(h, BSL), ...
    'Position', [220 ph-352 53 22]);
% Number of repeating spikes
uicontrol(p, 'Style', 'text', 'HorizontalAlignment', 'left', ...
    'String', 'Channels with repeating spikes:', ...
    'Position', [10 ph-371 170 14]);
uicontrol(p, 'Style', 'popupmenu', 'HorizontalAlignment', 'left', ...
    'String', {1:16}, ...
    'Value', BSL.nRepSpikes, ...
    'Tag', 'e_nRepSpikes_experiment', ...
    'Callback', @(h,ed) Callback_nRepSpikes(h, BSL), ...
    'Position', [220 ph-375 53 22]);

function Callback_blocks(hObject, BSL)
val = get(hObject, 'Value');
if isempty(val); return; end

BSL.curBlock = val;

function Callback_channels(hObject, BSL)
val = get(hObject, 'Value');
if isempty(val); return; end

BSL.curChannel = val;

function Callback_suppressRepSpikes(hObject, BSL)
block = BSL.block;
if get(hObject, 'Value') == get(hObject, 'Max')
    BSL.suppressRepSpikes = true;
    block.spikeTimings = block.spikeTimings_sup;
    
    set(findobj('Tag', 'e_tolerance_experiment'), 'Enable', 'on');
    set(findobj('Tag', 'e_nRepSpikes_experiment'), 'Enable', 'on');
else
    BSL.suppressRepSpikes = false;
    block.spikeTimings = block.spikeTimings_raw;
    
    set(findobj('Tag', 'e_tolerance_experiment'), 'Enable', 'off');
    set(findobj('Tag', 'e_nRepSpikes_experiment'), 'Enable', 'off');
end

block.processData('all');

function Callback_tolerance(hObject, BSL)
val = abs(sscanf(get(hObject, 'String'), '%f', 1));
if isempty(val)
    set(hObject, 'String', BSL.tolerance);
    errordlg('tolerance must be a number', 'Error');
    return
end
BSL.tolerance = val;

BSL.block.suppressRepSpikes(BSL.tolerance, BSL.nRepSpikes);
BSL.block.processData('all');

function Callback_nRepSpikes(hObject, BSL)
BSL.nRepSpikes = get(hObject, 'Value');

BSL.block.suppressRepSpikes(BSL.tolerance, BSL.nRepSpikes);
BSL.block.processData('all');

